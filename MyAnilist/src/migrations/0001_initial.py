# Generated by Django 5.2.5 on 2025-09-30 13:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='List',
            fields=[
                ('list_id', models.AutoField(primary_key=True, serialize=False)),
                ('list_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('isPrivate', models.BooleanField(default=False)),
                ('color', models.CharField(default='#3498db', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'List',
                'verbose_name_plural': 'Lists',
                'db_table': 'lists',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(editable=False, max_length=64, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Verification',
                'verbose_name_plural': 'Email Verifications',
                'db_table': 'email_verifications',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('anilist_id', models.IntegerField()),
                ('episode_number', models.IntegerField()),
                ('watched_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Watch History',
                'verbose_name_plural': 'Watch Histories',
                'db_table': 'histories',
                'ordering': ['-watched_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('anilist_id', models.IntegerField()),
                ('episode_number', models.IntegerField()),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('notification_type', models.CharField(default='episode_release', max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'db_table': 'notification_logs',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimeFollow',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('anilist_id', models.IntegerField()),
                ('notify_email', models.BooleanField(default=False)),
                ('episode_progress', models.IntegerField(default=0)),
                ('watch_status', models.CharField(choices=[('watching', 'Watching'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('dropped', 'Dropped'), ('plan_to_watch', 'Plan to Watch')], default='plan_to_watch', max_length=20)),
                ('isFavorite', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('finish_date', models.DateField(blank=True, null=True)),
                ('total_rewatch', models.IntegerField(default=0)),
                ('user_note', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anime_follows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Anime Follow',
                'verbose_name_plural': 'Anime Follows',
                'db_table': 'anime_follows',
                'unique_together': {('user', 'anilist_id')},
            },
        ),
        migrations.CreateModel(
            name='AnimeList',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('anilist_id', models.IntegerField()),
                ('added_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField(blank=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anime_items', to='src.list')),
            ],
            options={
                'verbose_name': 'Anime List Item',
                'verbose_name_plural': 'Anime List Items',
                'db_table': 'anime_lists',
                'ordering': ['-added_date'],
                'unique_together': {('list', 'anilist_id')},
            },
        ),
        migrations.CreateModel(
            name='UserList',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_owner', models.BooleanField(default=False)),
                ('can_edit', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lists', to='src.list')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User List',
                'verbose_name_plural': 'User Lists',
                'db_table': 'user_lists',
                'unique_together': {('user', 'list')},
            },
        ),
    ]
